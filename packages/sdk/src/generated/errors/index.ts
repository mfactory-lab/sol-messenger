/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

type ErrorWithCode = Error & { code: number }
type MaybeErrorWithCode = ErrorWithCode | null | undefined

const createErrorFromCodeLookup: Map<number, () => ErrorWithCode> = new Map()
const createErrorFromNameLookup: Map<string, () => ErrorWithCode> = new Map()

/**
 * Unauthorized: 'Unauthorized'
 *
 * @category Errors
 * @category generated
 */
export class UnauthorizedError extends Error {
  readonly code: number = 0x1770
  readonly name: string = 'Unauthorized'
  constructor() {
    super('Unauthorized')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, UnauthorizedError)
    }
  }
}

createErrorFromCodeLookup.set(0x1770, () => new UnauthorizedError())
createErrorFromNameLookup.set('Unauthorized', () => new UnauthorizedError())

/**
 * InvalidChannel: 'Invalid channel'
 *
 * @category Errors
 * @category generated
 */
export class InvalidChannelError extends Error {
  readonly code: number = 0x1771
  readonly name: string = 'InvalidChannel'
  constructor() {
    super('Invalid channel')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidChannelError)
    }
  }
}

createErrorFromCodeLookup.set(0x1771, () => new InvalidChannelError())
createErrorFromNameLookup.set('InvalidChannel', () => new InvalidChannelError())

/**
 * InvalidMembership: 'Invalid membership'
 *
 * @category Errors
 * @category generated
 */
export class InvalidMembershipError extends Error {
  readonly code: number = 0x1772
  readonly name: string = 'InvalidMembership'
  constructor() {
    super('Invalid membership')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidMembershipError)
    }
  }
}

createErrorFromCodeLookup.set(0x1772, () => new InvalidMembershipError())
createErrorFromNameLookup.set(
  'InvalidMembership',
  () => new InvalidMembershipError(),
)

/**
 * InvalidDevice: 'Invalid device'
 *
 * @category Errors
 * @category generated
 */
export class InvalidDeviceError extends Error {
  readonly code: number = 0x1773
  readonly name: string = 'InvalidDevice'
  constructor() {
    super('Invalid device')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidDeviceError)
    }
  }
}

createErrorFromCodeLookup.set(0x1773, () => new InvalidDeviceError())
createErrorFromNameLookup.set('InvalidDevice', () => new InvalidDeviceError())

/**
 * InvalidMessage: 'Invalid message'
 *
 * @category Errors
 * @category generated
 */
export class InvalidMessageError extends Error {
  readonly code: number = 0x1774
  readonly name: string = 'InvalidMessage'
  constructor() {
    super('Invalid message')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidMessageError)
    }
  }
}

createErrorFromCodeLookup.set(0x1774, () => new InvalidMessageError())
createErrorFromNameLookup.set('InvalidMessage', () => new InvalidMessageError())

/**
 * NameTooLong: 'Name too long'
 *
 * @category Errors
 * @category generated
 */
export class NameTooLongError extends Error {
  readonly code: number = 0x1775
  readonly name: string = 'NameTooLong'
  constructor() {
    super('Name too long')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, NameTooLongError)
    }
  }
}

createErrorFromCodeLookup.set(0x1775, () => new NameTooLongError())
createErrorFromNameLookup.set('NameTooLong', () => new NameTooLongError())

/**
 * WorkspaceTooLong: 'Workspace too long'
 *
 * @category Errors
 * @category generated
 */
export class WorkspaceTooLongError extends Error {
  readonly code: number = 0x1776
  readonly name: string = 'WorkspaceTooLong'
  constructor() {
    super('Workspace too long')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, WorkspaceTooLongError)
    }
  }
}

createErrorFromCodeLookup.set(0x1776, () => new WorkspaceTooLongError())
createErrorFromNameLookup.set(
  'WorkspaceTooLong',
  () => new WorkspaceTooLongError(),
)

/**
 * MessageTooLong: 'Message too long'
 *
 * @category Errors
 * @category generated
 */
export class MessageTooLongError extends Error {
  readonly code: number = 0x1777
  readonly name: string = 'MessageTooLong'
  constructor() {
    super('Message too long')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, MessageTooLongError)
    }
  }
}

createErrorFromCodeLookup.set(0x1777, () => new MessageTooLongError())
createErrorFromNameLookup.set('MessageTooLong', () => new MessageTooLongError())

/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 * @category generated
 */
export function errorFromCode(code: number): MaybeErrorWithCode {
  const createError = createErrorFromCodeLookup.get(code)
  return createError != null ? createError() : null
}

/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 * @category generated
 */
export function errorFromName(name: string): MaybeErrorWithCode {
  const createError = createErrorFromNameLookup.get(name)
  return createError != null ? createError() : null
}
