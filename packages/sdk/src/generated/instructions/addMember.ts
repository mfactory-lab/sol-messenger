/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import type { AddMemberData } from '../types/AddMemberData'
import { addMemberDataBeet } from '../types/AddMemberData'

/**
 * @category Instructions
 * @category AddMember
 * @category generated
 */
export interface AddMemberInstructionArgs {
  data: AddMemberData
}
/**
 * @category Instructions
 * @category AddMember
 * @category generated
 */
export const addMemberStruct = new beet.FixableBeetArgsStruct<
  AddMemberInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['data', addMemberDataBeet],
  ],
  'AddMemberInstructionArgs',
)
/**
 * Accounts required by the _addMember_ instruction
 *
 * @property [_writable_] channel
 * @property [] invitee
 * @property [_writable_] inviteeMembership
 * @property [_writable_] inviteeDevice
 * @property [_writable_] authorityMembership
 * @property [_writable_, **signer**] authority
 * @category Instructions
 * @category AddMember
 * @category generated
 */
export interface AddMemberInstructionAccounts {
  channel: web3.PublicKey
  invitee: web3.PublicKey
  inviteeMembership: web3.PublicKey
  inviteeDevice: web3.PublicKey
  authorityMembership: web3.PublicKey
  authority: web3.PublicKey
  systemProgram?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const addMemberInstructionDiscriminator = [
  13, 116, 123, 130, 126, 198, 57, 34,
]

/**
 * Creates a _AddMember_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category AddMember
 * @category generated
 */
export function createAddMemberInstruction(
  accounts: AddMemberInstructionAccounts,
  args: AddMemberInstructionArgs,
  programId = new web3.PublicKey('4AnSBTc21f4wTBHmnFyarbosr28Qk4CgGFBHcRh4kYPw'),
) {
  const [data] = addMemberStruct.serialize({
    instructionDiscriminator: addMemberInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.channel,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.invitee,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.inviteeMembership,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.inviteeDevice,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.authorityMembership,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.authority,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
